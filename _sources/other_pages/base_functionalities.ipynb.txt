{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Basic functionalities\n",
    "\n",
    "`ajmc` provides a simple framework to deal with the projects data. It can be used to compute stats, to evaluate an ocr output or simply to navigate through the data."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Navigate through the data\n",
    "\n",
    "### Creating a canonical commentary\n",
    "\n",
    "The simplest to navigate through a commentary is to instantiate a `text_processing.canonical_classes.CanonicalCommentary`. This object relies on an canonical json, which is an standardised and optimised storing format ocr outputs."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "outputs": [],
   "source": [
    "from ajmc.text_processing.canonical_classes import CanonicalCommentary\n",
    "from ajmc.commons.variables import COMMS_DATA_DIR\n",
    "\n",
    "comm_id = 'sophoclesplaysa05campgoog'\n",
    "can_json_path = COMMS_DATA_DIR / comm_id / 'canonical/3467O2_tess_retrained.json'\n",
    "comm = CanonicalCommentary.from_json(json_path=can_json_path)\n"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-09-03T13:13:35.914081Z",
     "start_time": "2023-09-03T13:13:33.203583Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "**Note**. This assumes you are creating a commentary a commentary compliant with ajmc's file structure. If you want to use custom paths to images, ocr-outputs or via files, please consider creating a `ajmc.text_processing.ocr_classes.RawCommentary` (see `examples/import_from_ocr.ipynb`)"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### The main functionalities of a `CanonicalCommentary`\n",
    "\n",
    "`CanonicalCommentary` are a particular case of the more generic `CanonicalTextContainer`. They have children (like `page`s, `region`s, `line`s, and `word`s) which are also `CanonicalTextContainer`s. They also have images and text. Let us have a look !\n",
    "\n"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "outputs": [
    {
     "data": {
      "text/plain": "[<ajmc.text_processing.canonical_classes.CanonicalRegion at 0x152decc10>,\n <ajmc.text_processing.canonical_classes.CanonicalRegion at 0x152defd90>,\n <ajmc.text_processing.canonical_classes.CanonicalRegion at 0x152e030d0>]"
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get a commentary's pages:\n",
    "comm.children.pages\n",
    "\n",
    "# Get a commentary's regions\n",
    "comm.children.regions\n",
    "\n",
    "# Get only the commentary's primary text regions\n",
    "[r for r in comm.children.regions if r.region_type=='primary_text']\n",
    "\n",
    "\n",
    "# Select app_crits of 140th to 160th page\n",
    "[r for p in comm.children.pages[139:159] for r in p.children.regions if r.region_type=='app_crit']"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-09-03T13:13:47.521877Z",
     "start_time": "2023-09-03T13:13:47.453393Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "### Other text containers\n",
    "\n",
    "Note that page-level containers like the one mentionned above also have other attributes like bounding boxes `self.bbox` and `parent`."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Pages, regions and lines"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "outputs": [
    {
     "data": {
      "text/plain": "2.411764705882353"
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get a single page by it's id\n",
    "page = [p for p in comm.children.pages if p.id == 'sophoclesplaysa05campgoog_0146'][0]\n",
    "\n",
    "# Get the page's image\n",
    "page.image\n",
    "\n",
    "# Get of the page's first commentary-region\n",
    "region = [r for r in page.children.regions if r.region_type=='commentary'][0]\n",
    "\n",
    "# Get its text\n",
    "region.text\n",
    "\n",
    "# Count the number of lines in a region\n",
    "len(region.children.lines)\n",
    "\n",
    "# Get the coordinates of the region\n",
    "region.bbox\n",
    "\n",
    "# Get the average numbers of chars in line number regions\n",
    "page_numbers = [r for r in comm.children.regions if r.region_type=='page_number']\n",
    "sum([len(r.text) for r in page_numbers])/len(page_numbers)\n"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2023-09-03T13:14:04.126197Z",
     "start_time": "2023-09-03T13:14:04.101502Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "For more information, the code documentation of `canonical_classes.py` is quiet furnished."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "#### Sections"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "outputs": [],
   "source": [
    "# For sections a special method has been added to retrieve a specific section of the commentary rapidly. \n",
    "section = comm.get_section('commentary')  # Your desired section type here\n",
    "\n",
    "# This is actually equivalent to doing: \n",
    "section = [s for s in comm.children.sections if 'commentary' in s.section_types][0]\n",
    "\n",
    "# sections then behave like any other text container. To get, for instance, the pages in a section, simply call\n",
    "section_pages = section.children.pages"
   ],
   "metadata": {
    "collapsed": false
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
